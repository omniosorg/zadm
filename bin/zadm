#!/usr/bin/env perl

use FindBin;
use lib qw(); # PERL5LIB
use lib "$FindBin::RealBin/../lib"; use lib "$FindBin::RealBin/../thirdparty/lib/perl5"; # LIBDIR
use strict;
use warnings;

use Pod::Usage;
use File::Basename qw(basename);
use Getopt::Long qw(:config posix_default no_ignore_case);
use Mojo::Promise;

use Zadm::Zones;

my $VERSION = '0.dev'; # VERSION
my $PROG    = basename $0;

if ($#ARGV >= 0 && $ARGV[0] =~ /^(?:--)?version$/) {
    print "$PROG $VERSION\n";
    exit 0;
}

#fix perldoc pager if not set
$ENV{PERLDOC_PAGER} ||= '/usr/bin/less -rins' if -x '/usr/bin/less';

sub main {
    my $mainOpt = shift // 'list';
    my $ret = 0;

    my $zones = Zadm::Zones->new($ENV{__ZADMDEBUG} ? (loglvl => 'debug') : ());

    # check if we are in global zone
    $zones->isGZ or die "ERROR: $PROG can only be run from global zone\n";

    for ($mainOpt) {
        /^create$/ && do {
            my $zName = pop @ARGV or pod2usage(1);

            my $opts = {};
            Getopt::Long::Configure(qw(permute pass_through));
            {
                local $SIG{__WARN__} = sub { };
                GetOptions($opts, qw(brand|b=s template|t=s)) or pod2usage(1);
            }
            $opts->{brand} or pod2usage(1);

            my @extraopts = $opts->{template}
                ? (template => $zones->utils->loadTemplate($opts->{template}, $zName))
                : ();

            my $zone = $zones->zone($zName, create => 1, brand => $opts->{brand}, opts => $opts, @extraopts);

            Getopt::Long::Configure(qw(no_permute no_pass_through));
            {
                local $SIG{__WARN__} = sub { };
                GetOptions($opts, @{$zone->getOptions($mainOpt)}) or $zone->usage;
            }
            $zone->checkMandOptions($mainOpt) or $zone->usage;

            if ($opts->{image}) {
                # we wait for all promises to be settled as otherwise a failing image
                # download would potentially exit the editor.
                Mojo::Promise->all_settled(
                    $zones->utils->edit_s($zone),
                    $zone->image->image_p
                )->then(sub {
                    my @res = @_;

                    for my $res (@res) {
                        next if $res->{status} eq 'fulfilled';

                        $ret = 1;
                        warn $res->{reason}->[0];
                    }
                })->wait;
            }
            else {
                $ret = !$zones->utils->edit($zone);
            }

            $zone->install if !$ret;

            last;
        };
        /^pull$/ && do {
            pop @ARGV or pod2usage(1); # No positional arguments required; keep -i and -b for consistency with e.g. create

            my $opts = {};
            Getopt::Long::Configure(qw(permute pass_through));
            {
                local $SIG{__WARN__} = sub { };
                GetOptions($opts, qw(brand|b=s)) or pod2usage(1);
            }
            $opts->{brand} or pod2usage(1);
            $opts->{image} or pod2usage(1);

            my $image = $images->image($opts->{image}, $opts->{brand});
            # Catch image not found and print error here?
           

            ## ???
            Getopt::Long::Configure(qw(no_permute no_pass_through));
            {
                local $SIG{__WARN__} = sub { };
                GetOptions($opts, @{$zone->getOptions($mainOpt)}) or $zone->usage;
            }
            $zone->checkMandOptions($mainOpt) or $zone->usage;

            
            # we wait for all promises to be settled as otherwise a failing image
            # download would potentially exit the editor.
            Mojo::Promise->all_settled(
                $image->image_p
                )->then(sub {
                my @res = @_;

                for my $res (@res) {
                    next if $res->{status} eq 'fulfilled';

                    $ret = 1;
                    warn $res->{reason}->[0];
                }
            })->wait;
            last;
        };
        /^edit$/ && do {
            my $zName = pop @ARGV or pod2usage(1);

            my $opts = {};
            my $zone = $zones->zone($zName, opts => $opts);

            $ret = !$zones->utils->edit($zone);

            last;
        };
        /^set$/ && do {
            my $set   = pop @ARGV or pod2usage(1);
            my $zName = pop @ARGV or pod2usage(1);

            my ($key, $val) = split /=/, $set, 2;
            $key && $val or die "ERROR: invalid argument. Expecting 'property=value'.\n";

            # special handling here to allow cpu-shares being set for the global zone
            if ($zName eq 'global') {
                die "ERROR: only setting 'cpu-shares' is supported for global zone.\n"
                    if $key ne 'cpu-shares';
                die "ERROR: 'cpu-shares' must be a positive integer.\n" if $val !~ /^\d+$/;

                $zones->utils->exec('zonecfg', [ qw(-z global set), $set ]);

                last;
            }

            my $opts = {};
            my $zone = $zones->zone($zName, opts => $opts);

            $zone->isSimpleProp($key) or die "ERROR: set is only supported for simple properties.\n";

            $ret = !$zones->utils->edit($zone, { $key => $val });

            last;
        };
        /^install$/ && do {
            my $zName = pop @ARGV or pod2usage(1);

            my $opts = {};
            Getopt::Long::Configure(qw(permute pass_through));
            {
                local $SIG{__WARN__} = sub { };
                GetOptions($opts, qw(force|f)) or pod2usage(1);
            }

            my $zone = $zones->zone($zName, opts => $opts);

            Getopt::Long::Configure(qw(no_permute no_pass_through));
            {
                local $SIG{__WARN__} = sub { };
                GetOptions($opts, @{$zone->getOptions($mainOpt)}) or $zone->usage;
            }
            $zone->checkMandOptions($mainOpt) or $zone->usage;

            die "ERROR: zone '$zName' is 'running'. Shut it down first.\n"
                if $zone->is('running');

            if (!$zone->is('configured')) {
                die "ERROR: zone '$zName' state is '" . $zone->state . "'.\n" .
                    "       Add the '-f' option to overwrite this zone.\n"
                    if !$opts->{force};

                $zone->uninstall;
            }

            # The uninstall command may have failed or been aborted by the
            # user. Only proceed with the installation if the zone is now
            # in the 'configured' state.
            $zone->install if $zone->is('configured');

            last;
        };
        /^uninstall$/ && do {
            my $zName = pop @ARGV or pod2usage(1);

            my $zone = $zones->zone($zName);

            die "ERROR: zone '$zName' is 'running'. Shut it down first.\n"
                if $zone->is('running');

            $zone->uninstall;

            last;
        };
        /^delete$/ && do {
            my $zName = pop @ARGV or pod2usage(1);

            my $zone = $zones->zone($zName);

            $zone->remove;

            last;
        };
        /^show$/ && do {
            my $zName = shift @ARGV;
            my $prop  = shift @ARGV;

            my $config = $zones->config($zName);

            $prop && do {
                die "ERROR: attribute '$prop' not found in zone configuration.\n"
                    if !exists $config->{$prop};

                $config = $config->{$prop};
            };

            print $zones->utils->encodeJSON($config);

            last;
        };
        /^list$/ && do {
            $zones->dump;

            last;
        };
        /^memstat$/ && do {
            $zones->memstat;

            last;
        };
        /^list-images$/ && do {
            my $opts = {};
            {
                local $SIG{__WARN__} = sub { };
                GetOptions($opts, qw(brand|b=s provider|p=s refresh|r verbose|v)) or pod2usage(1);
            }
            $zones->images->dump($opts);

            last;
        };
        /^vacuum$/ && do {
            my $opts = {};
            {
                local $SIG{__WARN__} = sub { };
                GetOptions($opts, qw(days|d=i)) or pod2usage(1);
                $opts->{days} && $opts->{days} < 0 and pod2usage(1);
            }
            $zones->images->vacuum($opts);

            last;
        };
        /^brands$/ && do {
            $zones->dumpBrands;

            last;
        };
        /^(?:start|boot)$/ && do {
            my $opts = {};
            Getopt::Long::Configure(qw(permute pass_through));
            {
                local $SIG{__WARN__} = sub { };
                GetOptions($opts, qw(console|c|C)) or pod2usage(1);
            }
            my $zName = pop @ARGV or pod2usage(1);

            $zones->zone($zName, opts => $opts)->boot(\@ARGV);
            last;
        };
        /^(?:stop|shutdown)$/ && do {
            my $zName = shift @ARGV or pod2usage(1);

            $zones->zone($zName)->shutdown;
            last;
        };
        /^(?:restart|reboot)$/ && do {
            my $zName = shift @ARGV or pod2usage(1);

            $zones->zone($zName)->reboot;
            last;
        };
        /^(?:poweroff|halt)$/ && do {
            my $zName = shift @ARGV or pod2usage(1);

            $zones->zone($zName)->poweroff;
            last;
        };
        /^reset$/ && do {
            my $zName = shift @ARGV or pod2usage(1);

            $zones->zone($zName)->reset;
            last;
        };
        /^console$/ && do {
            my $zName = pop @ARGV or pod2usage(1);

            $zones->zone($zName)->console(\@ARGV);

            last;
        };
        /^log$/ && do {
            my $zName = shift @ARGV or pod2usage(1);

            my $zone = $zones->zone($zName);
            $zone->utils->exec('pager', [ $zone->logfile ]);

            last;
        };
        /^man$/ && do {
            pod2usage(-exitstatus => 0, -verbose => 2);

            last;
        };
        /^doc$/ && do {
            my $opts = {};
            {
                local $SIG{__WARN__} = sub { };
                GetOptions($opts, qw(brand|b=s attr|a=s)) or pod2usage(1);
            }

            $opts->{brand} ||= 'ipkg';
            $zones->zone('global', create => 1, brand => $opts->{brand}, opts => $opts)->doc;

            last;
        };
        /^(?:--)?help$/ && do {
            my $opts = {};
            {
                local $SIG{__WARN__} = sub { };
                GetOptions($opts, qw(brand|b=s)) or pod2usage(1);
            }

            pod2usage(-exitstatus => 0) if (!$opts->{brand});

            $zones->zone('global', create => 1, brand => $opts->{brand})->usage;

            last;
        };
        # not a generic command, so we forward it to the brand specific implementation
        /^\w+$/ && do {
            my $zName = pop @ARGV or do {
                for my $brand (@{$zones->brands}) {
                    my $zone = $zones->zone('global', create => 1, brand => $brand);
                    $zone->usage if $zone->isPublic($mainOpt);
                }
                pod2usage(1);
            };

            my $opts = {};
            my $zone = $zones->zone($zName, opts => $opts);
            {
                local $SIG{__WARN__} = sub { };
                GetOptions($opts, @{$zone->getOptions($mainOpt)}) or $zone->usage;
            }
            $zone->checkMandOptions($mainOpt) or $zone->usage;

            $zone->usage if !$zone->can($mainOpt) || !$zone->isPublic($mainOpt);

            $zone->$mainOpt(@ARGV);
            last;
        };
        #main argument invalid
        pod2usage(1);
    }
    return $ret;
}

exit main(shift);

1;

__END__

=head1 NAME

zadm - Manage OmniOS zones.

=head1 SYNOPSIS

B<zadm> I<command> [I<options...>]

where 'command' is one of the following:

    pull -b <brand> -i <image_uuid>
    create -b <brand> [-t <template_path>] <zone_name>
    delete <zone_name>
    edit <zone_name>
    set <zone_name> <property=value>
    install [-f] <zone_name>
    uninstall <zone_name>
    show [zone_name [property]]
    list
    memstat
    list-images [--refresh] [--verbose] [-b <brand>] [-p <provider>]
    vacuum [-d <days>]
    brands
    start [-c [extra_args]] <zone_name>
    stop <zone_name>
    restart <zone_name>
    poweroff <zone_name>
    reset <zone_name>
    login <zone_name>
    console [extra_args] <zone_name>
    log <zone_name>
    fw [-r] [-d] [-t] [-m] [-e ipf|ipf6|ipnat] <zone_name>
    help [-b <brand>]
    doc [-b <brand>] [-a <attribute>]
    man
    version

=head1 DESCRIPTION

Use zadm to create, edit or manage your zones.

=head2 B<pull>

downloads the image with ID B<image_uuid> for brand B<brand> and caches this 
without creating a zone with it.

=head2 B<create>

creates a new zone with the name B<zone_name>.

zadm will open an editor showing a suitable default configuration for the
selected brand which can be modified as required. Once the configuration is
saved and the editor is closed, the zone will be created and installed. Any
required VNICs, ZFS datasets or volumes will be automatically set up based on
the configuration.

The zadm configuration format is JSON. Standard zone properties from
the I<zonecfg(1M)> man page are supported via simple "property" : "value" pairs,
single resources as "resource" : { } hash structure, and multiple resources
as "resource" : [ { }, ... ] array of hash structures. For more information
on the available attributes for a particular zone brand, issue
B<zadm doc -b E<lt>brandE<gt>>.

=head2 B<delete>

deletes zone B<zone_name>.

=head2 B<edit>

modify the configuration of a zone. See the descriptions in the B<create>
function for details.

=head2 B<set>

modify the configuration of a zone, changing a single attribute. See the
description in the B<create> function for details. Set only supports simple
"property" : "value" pairs.

=head2 B<install>

installs a zone. If the zone is already installed then the B<-f> option must
be provided in order to first uninstall the zone.

=head2 B<uninstall>

uninstalls a zone.

=head2 B<show>

shows the configuration for all zones in JSON format, or for a single zone
if a B<zone_name> is provided.

=head2 B<list>

prints the status of all existing zones.

=head2 B<memstat>

prints memory usage/caps for running zones.

=head2 B<list-images>

list all available images ready for download and install.

=head2 B<vacuum>

removes images from the local cache which have not been accessed in the last
30 days or the days specified with the B<-d> option.

=head2 B<brands>

list all available and installed zone brands

=head2 B<start>

starts the zone B<zone_name>. Attaches to the console if B<-c> is given.
Any B<extra_args> will be passed to B<zlogin(1)>.

=head2 B<stop>

stops the zone B<zone_name>

=head2 B<restart>

restarts the zone B<zone_name>

=head2 B<poweroff>

forcefully stops the zone B<zone_name> (i.e. "unplug")

=head2 B<reset>

forcefully stops the zone B<zone_name> (i.e. "unplug"); then boots the zone.

=head2 B<login>

log into B<zone_name>.

=head2 B<console>

attaches to the B<zone_name> zone console.
Any B<extra_args> will be passed to B<zlogin(1)>.

=head2 B<log>

displays the boot log for B<zone_name>.

=head2 B<fw>

manages the zone firewall. With no arguments, show the currently loaded
firewall and NAT rules for the zone.

  -r|--reload                 Reload and enable the zone firewall
  -m|--monitor                Monitor zone firewall activity in real-time to stdout
  -t|--top                    Show active zone firewall state in a top-like view
  -e|--edit <ipf|ipf6|ipnat>  Open a zone firewall configuration file in an editor.
  -d|--disable                Disable the zone firewall. It will be re-enabled
                              on zone reboot or with -r|--reload

=head2 B<doc>

displays information on the available attributes for a particular zone brand.
If the optional B<-a> B<E<lt>attributeE<gt>> argument is provided then only
that attribute is shown.

=head1 COPYRIGHT

Copyright 2021 OmniOS Community Edition (OmniOSce) Association.

=head1 LICENSE

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=head1 AUTHOR

S<Andy Fiddaman E<lt>omnios@citrus-it.co.ukE<gt>>
S<Dominik Hassler E<lt>hadfl@omnios.orgE<gt>>
S<Tobias Oetiker E<lt>tobi@oetiker.chE<gt>>

=head1 HISTORY

2020-04-12 had Initial Version

=cut

